# ------------------------------------------------------------------------------------
# Developed by Carpathian, LLC.
# ------------------------------------------------------------------------------------
# Legal Notice: Distribution Not Authorized.
# ------------------------------------------------------------------------------------
# PUBLIC DATA ENDPOINTS - Open Demo Data API
# ------------------------------------------------------------------------------------
# These endpoints provide access to open/demo data tables for development and testing.
# The data in these tables is generated by synthetic data generators and separate
# from the platform's user data processing pipeline.
# ------------------------------------------------------------------------------------

from flask import Blueprint, jsonify, request
from sqlalchemy import text, desc
from app.extensions import db
from app.models.public_data import Leads, WooCommerceOrder, UserCustomer
from app.utils.logging import logger

# Blueprint setup
public_data_bp = Blueprint("public_data", __name__, url_prefix="/public-data")

# ------------------------------------------------------------------------------------
# Helper Functions

def _paginate_query(query, page=1, per_page=50):
    """Paginate a SQLAlchemy query."""
    try:
        page = max(1, int(page))
        per_page = min(100, max(1, int(per_page)))  # Limit to 100 per page
    except (ValueError, TypeError):
        page = 1
        per_page = 50
    
    total = query.count()
    items = query.offset((page - 1) * per_page).limit(per_page).all()
    
    return {
        "items": items,
        "pagination": {
            "page": page,
            "per_page": per_page,
            "total": total,
            "pages": (total + per_page - 1) // per_page
        }
    }

def _serialize_lead(lead):
    """Serialize Leads to dict."""
    return {
        "id": lead.id,
        "first_name": lead.first_name,
        "last_name": lead.last_name,
        "email": lead.email,
        "ad_id": lead.ad_id,
        "ad_name": lead.ad_name,
        "adset_id": lead.adset_id,
        "adset_name": lead.adset_name,
        "campaign_id": lead.campaign_id,
        "campaign_name": lead.campaign_name,
        "form_id": lead.form_id,
        "form_name": lead.form_name,
        "is_organic": lead.is_organic,
        "platform": lead.platform,
        "retailer_item_id": lead.retailer_item_id,
        "lead_status": lead.lead_status,
        "created_at": lead.created_at.isoformat() if lead.created_at else None,
    }

def _serialize_order(order):
    """Serialize WooCommerceOrder to dict."""
    return {
        "id": order.id,
        "parent_id": order.parent_id,
        "status": order.status,
        "currency": order.currency,
        "total": float(order.total) if order.total else 0.0,
        "total_tax": float(order.total_tax) if order.total_tax else 0.0,
        "customer_id": order.customer_id,
        "number": order.number,
        "order_key": order.order_key,
        "payment_method": order.payment_method,
        "payment_method_title": order.payment_method_title,
        "created_via": order.created_via,
        "date_created": order.date_created.isoformat() if order.date_created else None,
        "date_modified": order.date_modified.isoformat() if order.date_modified else None,
        "date_completed": order.date_completed.isoformat() if order.date_completed else None,
        "date_paid": order.date_paid.isoformat() if order.date_paid else None,
    }

def _serialize_customer(customer):
    """Serialize UserCustomer to dict."""
    return {
        "id": customer.id,
        "first_name": customer.first_name,
        "last_name": customer.last_name,
        "email": customer.email,
        "phone": customer.phone,
        "address": customer.address,
        "city": customer.city,
        "state": customer.state,
        "country": customer.country,
        "zipcode": customer.zipcode,
        "activity_status": customer.activity_status,
        "created_at": customer.created_at.isoformat() if customer.created_at else None,
        "referrer": customer.referrer,
    }

# ------------------------------------------------------------------------------------
# Endpoints

@public_data_bp.route("/overview")
def overview():
    """Get overview statistics for all public data tables."""
    try:
        # Get counts for each table
        leads_count = db.session.query(Leads).count()
        orders_count = db.session.query(WooCommerceOrder).count()
        customers_count = db.session.query(UserCustomer).count()
        
        # Get recent records from each table
        recent_leads = db.session.query(Leads).order_by(desc(Leads.id)).limit(5).all()
        recent_orders = db.session.query(WooCommerceOrder).order_by(desc(WooCommerceOrder.id)).limit(5).all()
        recent_customers = db.session.query(UserCustomer).order_by(desc(UserCustomer.id)).limit(5).all()
        
        return jsonify({
            "status": "success",
            "data": {
                "counts": {
                    "leads": leads_count,
                    "orders": orders_count,
                    "customers": customers_count,
                    "total": leads_count + orders_count + customers_count
                },
                "recent": {
                    "leads": [_serialize_lead(lead) for lead in recent_leads],
                    "orders": [_serialize_order(order) for order in recent_orders],
                    "customers": [_serialize_customer(customer) for customer in recent_customers]
                }
            }
        })
        
    except Exception as e:
        logger.error(f"Error getting public data overview: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@public_data_bp.route("/leads")
def leads():
    """Get paginated list of leads."""
    try:
        page = request.args.get("page", 1, type=int)
        per_page = request.args.get("per_page", 50, type=int)
        
        query = db.session.query(Leads).order_by(desc(Leads.id))
        result = _paginate_query(query, page, per_page)
        
        return jsonify({
            "status": "success",
            "data": [_serialize_lead(lead) for lead in result["items"]],
            "pagination": result["pagination"]
        })
        
    except Exception as e:
        logger.error(f"Error getting leads: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@public_data_bp.route("/orders")
def orders():
    """Get paginated list of WooCommerce orders."""
    try:
        page = request.args.get("page", 1, type=int)
        per_page = request.args.get("per_page", 50, type=int)
        
        query = db.session.query(WooCommerceOrder).order_by(desc(WooCommerceOrder.id))
        result = _paginate_query(query, page, per_page)
        
        return jsonify({
            "status": "success", 
            "data": [_serialize_order(order) for order in result["items"]],
            "pagination": result["pagination"]
        })
        
    except Exception as e:
        logger.error(f"Error getting orders: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@public_data_bp.route("/customers")
def customers():
    """Get paginated list of customers."""
    try:
        page = request.args.get("page", 1, type=int)
        per_page = request.args.get("per_page", 50, type=int)
        
        query = db.session.query(UserCustomer).order_by(desc(UserCustomer.id))
        result = _paginate_query(query, page, per_page)
        
        return jsonify({
            "status": "success",
            "data": [_serialize_customer(customer) for customer in result["items"]],
            "pagination": result["pagination"]
        })
        
    except Exception as e:
        logger.error(f"Error getting customers: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@public_data_bp.route("/stats")
def stats():
    """Get aggregated statistics across all public data tables."""
    try:
        # Basic counts
        leads_count = db.session.query(Leads).count()
        orders_count = db.session.query(WooCommerceOrder).count()  
        customers_count = db.session.query(UserCustomer).count()
        
        # Lead stats
        organic_leads = db.session.query(Leads).filter_by(is_organic=True).count()
        paid_leads = leads_count - organic_leads
        
        # Order stats
        completed_orders = db.session.query(WooCommerceOrder).filter(
            WooCommerceOrder.status.in_(["completed", "processing"])
        ).count()
        
        total_revenue = db.session.query(
            db.func.sum(WooCommerceOrder.total)
        ).filter(
            WooCommerceOrder.status.in_(["completed", "processing"])
        ).scalar() or 0
        
        # Customer stats
        active_customers = db.session.query(UserCustomer).filter(
            UserCustomer.activity_status.in_(["active", "subscribed"])
        ).count()
        
        return jsonify({
            "status": "success",
            "data": {
                "counts": {
                    "total_leads": leads_count,
                    "organic_leads": organic_leads,
                    "paid_leads": paid_leads,
                    "total_orders": orders_count,
                    "completed_orders": completed_orders,
                    "total_customers": customers_count,
                    "active_customers": active_customers
                },
                "revenue": {
                    "total_revenue": float(total_revenue),
                    "avg_order_value": float(total_revenue / completed_orders) if completed_orders > 0 else 0
                },
                "conversion": {
                    "order_conversion_rate": (completed_orders / leads_count * 100) if leads_count > 0 else 0,
                    "customer_activation_rate": (active_customers / customers_count * 100) if customers_count > 0 else 0
                }
            }
        })
        
    except Exception as e:
        logger.error(f"Error getting public data stats: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500